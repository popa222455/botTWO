import math

from plugin_system import Plugin

plugin = Plugin("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                usage=["–ø–æ—Å—á–∏—Ç–∞—Ç—å [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞",
                       "–ø–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã"])


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
class Data:
    __slots__ = ["Q", "W"]

    def __init__(self):
        self.Q = []  # Operands
        self.W = []  # Operators


# –°–∫–µ–ª–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
class Function:
    __slots__ = ["sign", "function", "priority", "arguments", "description", "display"]

    def __init__(self, sign, function, description, arguments, priority, display=True):
        self.sign = sign
        self.function = function
        self.arguments = arguments
        self.priority = priority
        self.description = description

        self.display = display

    def clone_no_priority(self):
        return Function(self.sign, self.function, self.description, self.arguments, 0, False)

    def __call__(self, *args):
        return self.function(*args)

    def __repr__(self):
        return self.sign


def fix_error(x):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PI(—á—É—Ç—å-—á—É—Ç—å)"""

    return round(x, 10)


def process(data, action):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å—Ç–∞–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—ç–∫"""
    if not action.function:
        return True

    # –ï—Å–ª–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –≤—ã–¥–∞—ë–º –æ—à–∏–±–∫—É
    try:
        # –ë–µ—Ä—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        if action.arguments == 1:
            a = data.Q.pop()

            data.Q.append(action(a))

        elif action.arguments == 2:
            b = data.Q.pop()
            a = data.Q.pop()

            data.Q.append(action(a, b))

        return True

    except (TypeError, ValueError):
        return None


def do_bracket(data):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å—Ç—ç–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—ç–∫"""
    action = FUNCTIONS["+"]

    while data.W and action.sign != "(":
        action = data.W.pop()

        if process(data, action) is None:
            return False

    return True


def is_float(s):
    """–í—ã–ø–æ–ª–Ω—è–µn –≤–µ—Ä—Ö–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å—Ç–∞–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—ç–∫"""
    try:
        float(s)
    except ValueError:
        return False

    if "+" in s or "-" in s:
        return False

    return True


# –ì–ª–∞–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –≤—ã–≤–æ–¥–∏—Ç –ø–æ–º–æ—â—å, –µ—Å–ª–∏ –Ω–∞–¥–æ, –∏–ª–∏ —Å—á–∏—Ç–∞–µ—Ç
@plugin.on_command('–ø–æ—Å—á–∏—Ç–∞–π', '–ø–æ—Å—á–∏—Ç–∞—Ç—å')
async def calc(msg, args):
    if not args:
        return await msg.answer("–ù–µ—á–µ–≥–æ —Å—á–∏—Ç–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ!")

    if args[0].lower() == "–ø–æ–º–æ—â—å":
        result = ""

        for k, v in FUNCTIONS.items():
            if not v.display:
                continue

            temp = "üî∑ \"" + v.sign + "\" - " + v.description + "\n\n"

            # msg.answer –¥–µ–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª–∏–Ω–æ–π 550, –Ω–æ –Ω–∞–º
            # –Ω–µ –Ω–∞–¥–æ, —á—Ç–æ–±—ã –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ —Ä–∞–∑–æ—à–ª–æ—Å—å
            # –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
            if len(result) + len(temp) >= 550:
                await msg.answer(result)
                result = ""

            result += temp

        return await msg.answer(result)

    # –æ–±–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∏, —á—Ç–æ–±—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
    exp = "(" + " ".join(args) + ")"

    # –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
    data = Data()

    current_exp = ""
    prev_type = ""

    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—é –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
    for i in range(len(exp)):

        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        if exp[i] == " ":
            continue

        # pi - —ç—Ç–æ —á–∏—Å–ª–æ(3.14...)
        if current_exp == "pi":
            data.Q.append(math.pi)

            prev_type = ""
            current_exp = ""

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É –Ω–∞—Å —Å–æ–±—Ä–∞–ª–æ—Å—å —á–∏—Å–ª–æ, –∞ –Ω–æ–≤—ã–π
        # —Å–∏–º–≤–æ–ª - –Ω–µ —á–∏—Å–ª–æ, –∑–Ω–∞—á–∏—Ç –º—ã –ø–æ–ª—É—á–∏–ª–∏ —á–∏—Å–ª–æ
        elif is_float(current_exp) and not is_float(exp[i]) and not exp[i] == ".":
            data.Q.append(float(current_exp))

            prev_type = "numb"
            current_exp = ""

        # –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª –≤ –Ω–µ—Å–æ–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        current_exp += exp[i]

        # –µ—Å–ª–∏ –º—ã —Å–æ–±—Ä–∞–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        # –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        if current_exp in FUNCTIONS:

            # –µ—Å–ª–∏ —É –Ω–∞—Å –∏–¥—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥ –∏ —ç—Ç–æ –Ω–µ
            # —Å–∫–æ–±–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
            # –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏—Ö –Ω–∞–ø–æ—Ç–æ–º (—Å–∏–º—É–ª–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏)
            if (prev_type and current_exp and
                        prev_type is not "numb" and
                        prev_type is not ")" and
                        current_exp not in "()"):

                # –µ—Å–ª–∏ —Ç–æ —Å —á–µ–º –º—ã —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è - —ç—Ç–æ –º–∏–Ω—É—Å –∏–ª–∏ –ø–ª—é—Å (—É–Ω–∞—Ä–Ω—ã–µ, —Ç.–µ. –Ω–µ 0 - 1, –∞ - 1),
                # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–ª—å, —á—Ç–æ–±—ã —Å—Ç—ç–∫ –º–æ–≥ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å—Ç—ç–∫
                # —Å –Ω—É–ª–µ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∏—Ö –∏–∑ 0 - 1 –≤ - 1
                if current_exp in "-+":
                    data.Q.append(0)

                    data.W.append(FUNCTIONS[current_exp].clone_no_priority())

                # –∏–Ω–∞—á–µ - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç—ç–∫
                else:
                    data.W.append(FUNCTIONS[current_exp])

                # –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –∏–¥—ë–º –¥–∞–ª—å—à–µ
                prev_type = current_exp
                current_exp = ""
                continue

            # –µ—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ —Å–∫–æ–±–∫–∏ - —Ä–µ—à–∞–µ–º –µ—ë –≤—Å—é
            if current_exp == ")":
                if not do_bracket(data):
                    return await msg.answer("–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–±–æ—Ä–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è!")

            # –µ—Å–ª–∏ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º
            # –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ—à–∏—Ç—å –≤—Å—ë –ø–µ—Ä–µ–¥ –Ω–∏–º.
            # –∑–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
            # —á–µ–º –æ–Ω –≤—ã—à–µ - —Ç–µ–º –ø–æ–∑–¥–Ω–µ–µ –æ–Ω –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω
            else:
                while data.W and 0 <= data.W[-1].priority <= FUNCTIONS[current_exp].priority:
                    action = data.W.pop()
                    if process(data, action) is None:
                        return await msg.answer("–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–±–æ—Ä–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è!")

                # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —Å—Ç—ç–∫
                data.W.append(FUNCTIONS[current_exp])

            # –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å —Ç–µ–∫—É—à–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
            prev_type = current_exp
            current_exp = ""

    # –µ—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å–∞—Ç–µ —É –Ω–∞—Å –Ω–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –∏–ª–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ—à–∏–±–∫–∞, –ª–∏–≤–æ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
    if len(data.Q) != 1:
        return await msg.answer("–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–±–æ—Ä–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è!")

    else:
        return await msg.answer(f"–û—Ç–≤–µ—Ç: {data.Q.pop()}")


# –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
FUNCTIONS = []

# Functions(2 operands):
FUNCTIONS.append(Function(sign="+",
                          function=lambda x, y: x + y,
                          description="–°–ª–æ–∂–µ–Ω–∏–µ (x + y, 5 + 2 = 7)",
                          arguments=2,
                          priority=3))

FUNCTIONS.append(Function(sign="-",
                          function=lambda x, y: x - y,
                          description="–í—ã—á–∏—Ç–∞–Ω–∏–µ (x - y, 5 - 2 = 3)",
                          arguments=2,
                          priority=3))

FUNCTIONS.append(Function(sign="*",
                          function=lambda x, y: x * y,
                          description="–£–º–Ω–æ–∂–µ–Ω–∏–µ (x * y, 5 * 2 = 10)",
                          arguments=2,
                          priority=2))

FUNCTIONS.append(Function(sign="/",
                          function=lambda x, y: x / y,
                          description="–î–µ–ª–µ–Ω–∏–µ (x * y, 5 / 2 = 2.5)",
                          arguments=2,
                          priority=2))

FUNCTIONS.append(Function(sign="mod",
                          function=lambda x, y: x % y,
                          description="–û—Å—Ç–∞—Ç–æ–∫ –¥–µ–ª–µ–Ω–∏—è (x mod y, 5 mod 2 = 1)",
                          arguments=2,
                          priority=2))

FUNCTIONS.append(Function(sign="div",
                          function=lambda x, y: x // y,
                          description="–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ (x div y, 5 div 2 = 2)",
                          arguments=2,
                          priority=2))

FUNCTIONS.append(Function(sign="log",
                          function=lambda x, y: math.log(y, x),
                          description="–õ–æ–≥–æ—Ä–∏—Ñ–º –∏–∑ y –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é x (x log y, 2 log 4 = 2)",
                          arguments=2,
                          priority=2))

FUNCTIONS.append(Function(sign="^",
                          function=lambda x, y: x ** y,
                          description="–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è x –≤ —Å—Ç–µ–ø–µ–Ω—å y(x ^ y, 3 ^ 2 = 9)",
                          arguments=2,
                          priority=1))
#
# Functions 1 operand
FUNCTIONS.append(Function(sign="sin",
                          function=lambda x: fix_error(math.sin(x)),
                          description="–°–∏–Ω—É—Å —É–≥–ª–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (sin x, sin (pi / 6) = 0.5)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="cos",
                          function=lambda x: fix_error(math.cos(x)),
                          description="–ö–æ—Å–∏–Ω—É—Å —É–≥–ª–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (cos x, cos (pi / 3) = 0.5)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="tg",
                          function=lambda x: fix_error(math.tan(x)),
                          description="–¢–∞–Ω–≥–µ–Ω—Å —É–≥–ª–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (tg x, tg (pi / 4) = 1)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="ctg",
                          function=lambda x: fix_error(1 / math.tan(x)),
                          description="–ö–æ—Å–∏–Ω—É—Å —É–≥–ª–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (ctg x, ctg (pi / 4) = 1)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="arcsin",
                          function=lambda x: fix_error(math.asin(x)),
                          description="–ê—Ä–∫—Å–∏–Ω—É—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (arcsin x, arcsin 0.5 = 0.52...)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="arccos",
                          function=lambda x: fix_error(math.acos(x)),
                          description="–ê—Ä–∫–∫–æ—Å–∏–Ω—É—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (arccos x, arccos 0.5 = 1.04...)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="arctg",
                          function=lambda x: fix_error(math.atan(x)),
                          description="–¢–∞–Ω–≥–µ–Ω—Å —É–≥–ª–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (arctg x, arctg 0.5 = 0.46...)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="arcctg",
                          function=lambda x: fix_error(math.pi / 2 - math.atan(x)),
                          description="–ö–æ—Å–∏–Ω—É—Å —É–≥–ª–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (arcctg x, arcctg 0.5 = 1.10...)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="sqrt",
                          function=lambda x: math.sqrt(x),
                          description="–ö–æ—Ä–µ–Ω—å –∏–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (sqrt x, sqrt 9 = 3)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="abs",
                          function=lambda x: math.fabs(x),
                          description="–ú–æ–¥—É–ª—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è (abs x, abs -9 = 9)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function(sign="!",
                          function=lambda x: math.factorial(x),
                          description="–§–∞–∫—Ç–æ—Ä–∏–∞–ª (!x, !4 = 24)",
                          arguments=1,
                          priority=1))

FUNCTIONS.append(Function("(", None, "–°–∫–æ–±–æ—á–∫–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", 0, -1))
FUNCTIONS.append(Function(")", None, "–°–∫–æ–±–æ—á–∫–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", 0, 50))

FUNCTIONS = {func.sign: func for func in FUNCTIONS}
